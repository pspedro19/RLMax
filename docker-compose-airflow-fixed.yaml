version: '3.8'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.7.0-python3.10
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    _AIRFLOW_DB_MIGRATE: 'true'
    _AIRFLOW_WWW_USER_CREATE: 'true'
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    
    # Environment variables for L5
    L5_TOTAL_TIMESTEPS: 1000000
    L5_BATCH_SIZE: 256
    L5_N_STEPS: 2048
    L5_LEARNING_RATE: 0.0003
    L5_ENT_COEF: 0.01
    L5_DEVICE: ${L5_DEVICE:-cpu}
    
    # Git configuration
    GIT_PYTHON_GIT_EXECUTABLE: /usr/bin/git
    GIT_PYTHON_REFRESH: quiet
    
    # MinIO configuration
    MINIO_ENDPOINT: minio:9000
    MINIO_ACCESS_KEY: minioadmin
    MINIO_SECRET_KEY: minioadmin123
    
    # MLflow configuration
    MLFLOW_TRACKING_URI: http://mlflow:5000
    MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    AWS_ACCESS_KEY_ID: minioadmin
    AWS_SECRET_ACCESS_KEY: minioadmin123
    
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/data:/opt/airflow/data
    - ${AIRFLOW_PROJ_DIR:-.}/models:/opt/airflow/models
    
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    # Install git and additional packages
    user: root
    entrypoint: |
      bash -c "
        apt-get update && apt-get install -y git &&
        pip install --no-cache-dir \
          stable-baselines3==2.1.0 \
          torch==2.0.1 \
          onnx==1.14.0 \
          onnxruntime==1.15.1 \
          GitPython==3.1.31 &&
        exec /entrypoint airflow webserver
      "

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    # Install git and additional packages
    user: root
    entrypoint: |
      bash -c "
        apt-get update && apt-get install -y git &&
        pip install --no-cache-dir \
          stable-baselines3==2.1.0 \
          torch==2.0.1 \
          onnx==1.14.0 \
          onnxruntime==1.15.1 \
          GitPython==3.1.31 &&
        exec /entrypoint airflow scheduler
      "

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    # Install git and additional packages
    user: root
    entrypoint: |
      bash -c "
        apt-get update && apt-get install -y git &&
        pip install --no-cache-dir \
          stable-baselines3==2.1.0 \
          torch==2.0.1 \
          onnx==1.14.0 \
          onnxruntime==1.15.1 \
          GitPython==3.1.31 &&
        exec /entrypoint airflow celery worker
      "

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Install git first
        apt-get update && apt-get install -y git
        
        # Install Python packages
        pip install --no-cache-dir \
          stable-baselines3==2.1.0 \
          torch==2.0.1 \
          onnx==1.14.0 \
          onnxruntime==1.15.1 \
          GitPython==3.1.31
        
        # Initialize database
        airflow db init
        
        # Create admin user
        airflow users create \
          --username $${_AIRFLOW_WWW_USER_USERNAME:-airflow} \
          --password $${_AIRFLOW_WWW_USER_PASSWORD:-airflow} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
        
        echo "Airflow initialization complete"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: root

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: trading-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MLflow for experiment tracking
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: trading-mlflow
    ports:
      - "5000:5000"
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri sqlite:///mlflow.db
      --default-artifact-root s3://mlflow/
    depends_on:
      - minio

volumes:
  postgres-db-volume:
  minio-data: