version: '3.9'
name: trading-system

# Core services only - no custom builds required

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow123@postgres:5432/airflow
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:?Please set AIRFLOW_FERNET_KEY in .env}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:?Please set AIRFLOW_SECRET_KEY in .env}
    _PIP_ADDITIONAL_REQUIREMENTS: 'apache-airflow-providers-amazon boto3 scipy pandas numpy scikit-learn matplotlib seaborn stable-baselines3 gymnasium minio mlflow'
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/configs:/opt/airflow/configs
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy

services:
  # ═══════════════════════════════════════════════════════════════════════════
  # DATABASE LAYER
  # ═══════════════════════════════════════════════════════════════════════════
  
  postgres:
    image: postgres:16-alpine
    container_name: trading-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading-network

  # ═══════════════════════════════════════════════════════════════════════════
  # CACHING LAYER
  # ═══════════════════════════════════════════════════════════════════════════
  
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    command: redis-server --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading-network

  # ═══════════════════════════════════════════════════════════════════════════
  # OBJECT STORAGE (MinIO - S3 compatible)
  # ═══════════════════════════════════════════════════════════════════════════
  
  minio:
    image: minio/minio:latest
    container_name: trading-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - trading-network

  # ═══════════════════════════════════════════════════════════════════════════
  # ML PLATFORM (MLflow)
  # ═══════════════════════════════════════════════════════════════════════════
  
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: trading-mlflow
    restart: unless-stopped
    command: >
      mlflow server
      --backend-store-uri sqlite:///mlflow/mlflow.db
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
      --port 5000
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - trading-network

  # ═══════════════════════════════════════════════════════════════════════════
  # WORKFLOW ORCHESTRATION (Airflow)
  # ═══════════════════════════════════════════════════════════════════════════

  airflow-init:
    <<: *airflow-common
    container_name: trading-airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo "AIRFLOW_UID not set, using default"
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/configs
        chown -R "${AIRFLOW_UID:-50000}:0" /sources/{logs,dags,plugins,configs}
        exec /entrypoint airflow db init
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ./airflow:/sources
    networks:
      - trading-network

  airflow-webserver:
    <<: *airflow-common
    container_name: usdcop-airflow-webserver
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - trading-network

  airflow-scheduler:
    <<: *airflow-common
    container_name: usdcop-airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - trading-network

# ═══════════════════════════════════════════════════════════════════════════════
# NETWORKS
# ═══════════════════════════════════════════════════════════════════════════════

networks:
  trading-network:
    driver: bridge
    name: trading-network

# ═══════════════════════════════════════════════════════════════════════════════
# VOLUMES
# ═══════════════════════════════════════════════════════════════════════════════

volumes:
  postgres_data:
  redis_data:
  minio_data:
  mlflow_data: